/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.projectTeam8;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
//   @Test
//   @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
//   void test_main() throws Exception {
//     // writes data to byte array
//     ByteArrayOutputStream bytes = new ByteArrayOutputStream();
//     // wraps bytes and auto flashes after every new line
//     PrintStream out = new PrintStream(bytes, true);
//     // reads content of the file
//     InputStream input = getClass().getClassLoader().getResourceAsStream("input.txt");

//     InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("output.txt");
//     assertNotNull(expectedStream);

//     InputStream oldIn = System.in;
//     PrintStream oldOut = System.out;

//     try {
//       // redirect standard input stream to InputStreamobject
//       System.setIn(input);
//       System.setOut(out);
//       // this simulates running main without arguments
//       String[] args = { "test" };
//       App.main(args);

//     } finally {
//       System.setIn(oldIn);
//       System.setOut(oldOut);
//     }
//     // convert bytes read to string
//     String expected = new String(expectedStream.readAllBytes());
//     String actual = bytes.toString();
// //    assertEquals(expected, actual);
//     char[] expectedChar = expected.toCharArray();
//     char[] actualChar = actual.toCharArray();
//     assertEquals(expectedChar.length,actualChar.length);
//     int cnt = 0;
//     for (int i=0;i<expectedChar.length;i++){
//       if (expectedChar[i]==actualChar[i])
//         cnt++;
//     }
//     assertTrue(cnt*1./expectedChar.length>0.95);

//     }
 }


  // @Disabled
  // @Test
  // @ResourceLock(value = Resources.SYSTEM_OUT, mode =
  // ResourceAccessMode.READ_WRITE)
  // void test_main1() throws IOException {
  // // writes data to byte array
  // ByteArrayOutputStream bytes = new ByteArrayOutputStream();
  // // wraps bytes and auto flashes after every new line
  // PrintStream out = new PrintStream(bytes, true);
  // // reads content of the file
  // InputStream input =
  // getClass().getClassLoader().getResourceAsStream("input1.txt");
  // InputStream expectedStream =
  // getClass().getClassLoader().getResourceAsStream("output1.txt");
  // assertNotNull(expectedStream);

  // InputStream oldIn = System.in;
  // PrintStream oldOut = System.out;

  // try {
  // // redirect standard input stream to InputStreamobject
  // System.setIn(input);
  // System.setOut(out);
  // // this simulates running main without arguments
  // App.main(new String[0]);

  // } finally {
  // System.setIn(oldIn);
  // System.setOut(oldOut);
  // }
  // // convert bytes read to string
  // String expected = new String(expectedStream.readAllBytes());
  // String actual = bytes.toString();
  // assertEquals(expected, actual);

  // }
  // @Disabled
  // @Test
  // @ResourceLock(value = Resources.SYSTEM_OUT, mode =
  // ResourceAccessMode.READ_WRITE)
  // void test_main2() throws IOException {
  // // writes data to byte array
  // ByteArrayOutputStream bytes = new ByteArrayOutputStream();
  // // wraps bytes and auto flashes after every new line
  // PrintStream out = new PrintStream(bytes, true);
  // // reads content of the file
  // InputStream input =
  // getClass().getClassLoader().getResourceAsStream("input2.txt");
  // InputStream expectedStream =
  // getClass().getClassLoader().getResourceAsStream("output2.txt");
  // assertNotNull(expectedStream);

  // InputStream oldIn = System.in;
  // PrintStream oldOut = System.out;

  // try {
  // // redirect standard input stream to InputStreamobject
  // System.setIn(input);
  // System.setOut(out);
  // // this simulates running main without arguments
  // App.main(new String[0]);

  // } finally {
  // System.setIn(oldIn);
  // System.setOut(oldOut);
  // }
  // // convert bytes read to string
  // String expected = new String(expectedStream.readAllBytes());
  // String actual = bytes.toString();
  // assertEquals(expected, actual);

  // }
  // @Disabled
  // @Test
  // @ResourceLock(value = Resources.SYSTEM_OUT, mode =
  // ResourceAccessMode.READ_WRITE)
  // void test_main3() throws IOException, Exception {
  // // writes data to byte array
  // ByteArrayOutputStream bytes = new ByteArrayOutputStream();
  // // wraps bytes and auto flashes after every new line
  // PrintStream out = new PrintStream(bytes, true);
  // // reads content of the file
  // InputStream input =
  // getClass().getClassLoader().getResourceAsStream("input.txt");
  // InputStream expectedStream =
  // getClass().getClassLoader().getResourceAsStream("output.txt");
  // assertNotNull(expectedStream);

  // InputStream oldIn = System.in;
  // PrintStream oldOut = System.out;

  // try {
  // // redirect standard input stream to InputStreamobject
  // System.setIn(input);
  // System.setOut(out);
  // // this simulates running main without arguments
  // App.main(new String[0]);

  // } finally {
  // System.setIn(oldIn);
  // System.setOut(oldOut);
  // }
  // // convert bytes read to string
  // String expected = new String(expectedStream.readAllBytes());
  // String actual = bytes.toString();
  // assertEquals(expected, actual);

  // }

  // @Test
  // @ResourceLock(value = Resources.SYSTEM_OUT, mode =
  // ResourceAccessMode.READ_WRITE)
  // void test_main4() throws IOException, Exception {
  // String persistentDataFileName;
  // persistentDataFileName = "";
  /*
   * writes data to byte array
   * ByteArrayOutputStream bytes = new ByteArrayOutputStream();
   * wraps bytes and auto flashes after every new line
   * PrintStream out = new PrintStream(bytes, true);
   * reads content of the file
   * InputStream input =
   * getClass().getClassLoader().getResourceAsStream("input3.txt");
   * InputStream expectedStream =
   * getClass().getClassLoader().getResourceAsStream("output3.txt");
   * assertNotNull(expectedStream);
   * 
   * InputStream oldIn = System.in;
   * PrintStream oldOut = System.out;
   * 
   * try {
   * redirect standard input stream to InputStreamobject
   * System.setIn(input);
   * System.setOut(out);
   * this simulates running main without arguments
   * App.main(new String[0]);
   * 
   * } finally {
   * System.setIn(oldIn);
   * System.setOut(oldOut);
   * }
   * convert bytes read to string
   * String expected = new String(expectedStream.readAllBytes());
   * String actual = bytes.toString();
   * assertEquals(expected, actual);
   */
  // }


